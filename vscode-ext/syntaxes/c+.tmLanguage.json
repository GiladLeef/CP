{
	"$schema": "https://raw.githubusercontent.com/martinring/tmlanguage/master/tmlanguage.json",
	"name": "C+",
	"patterns": [
		{
			"include": "#keywords"
		},
		{
			"include": "#strings"
		},
		{
			"include": "#basic_types"
		},
		{
			"include": "#function"
		},
		{
			"include": "#class"
		},
		{
			"include": "#variables"
		},
		{
			"include": "#value"
		},
		{
			"include": "#comment-inline"
		}
	],
	"repository": {
		"keywords": {
			"patterns": [{
				"name": "keyword.control.c+",
				"match": "\\b(if|else|while|do|for|return|import|new)\\b"
			}]
		},
		"strings": {
			"name": "string.quoted.double.c+",
			"begin": "\"",
			"end": "\"",
			"patterns": [
				{
					"name": "constant.character.escape.c+",
					"match": "\\\\."
				}
			]
		},
		"basic_types": {
			"patterns": [{
				"name": "constant.language.c+",
				"match": "\\b(int|char|string|float|void)\\b"
			}]
		},

		"function": {
			"name": "entity.name.function.c+",
			"match": "\\b([a-zA-Z_][a-zA-Z0-9_]*)\\s*(?=\\()",
			"captures": {
				"1": {
					"name": "entity.name.function.c+"
				}
			}
		},
		"class": {
			"patterns": [
				{
				"match": "\\b(class)\\s+([A-Z][a-zA-Z0-9_]*)",
				"captures": {
					"1": {
					"name": "storage.type.class.c+"
					},
					"2": {
					"name": "entity.name.class.c+"
					}
				}
				}
			]
		},
		"comment-inline": {
			"begin": "//",
			"name": "comment.line",
			"end": "\n"
		},
		"variables": {
			"patterns": [
				{
				"begin": "\\b\\s+([a-zA-Z_][a-zA-Z0-9_]*)\\s*\\b\\s+([a-zA-Z_][a-zA-Z0-9_]*)\\s*=",
				"beginCaptures": {
					"1": {
					"name": "constant.language.c+"
					},
					"2": {
					"name": "variable.other.c+"
					}
				},
				"end": ";",
				"patterns": [
					{
					"include": "#value"
					}
				]
				},
				{
				"match": "\\b\\s+([a-zA-Z_][a-zA-Z0-9_]*)\\s*\\b\\s+([a-zA-Z_][a-zA-Z0-9_]*)\\s*;",
				"captures": {
					"1": {
					"name": "constant.language.c+"
					},
					"2": {
					"name": "variable.other.c+"
					}
				}
				}
			]
		},
		"value": {
			"patterns": [
				{
				"name": "constant.numeric.c+",
				"match": "\\b[0-9]+\\b"
				},
				{
				"name": "string.quoted.double.c+",
				"begin": "\"",
				"end": "\"",
				"patterns": [
					{
					"name": "constant.character.escape.c+",
					"match": "\\\\."
					}
				]
				}
			]
		}



	},
	"scopeName": "source.cp"
}